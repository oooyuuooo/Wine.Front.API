// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Wine.Front.API.Models;

public partial class dbWineContext : DbContext
{
    public dbWineContext(DbContextOptions<dbWineContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Capacity> Capacities { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Event> Events { get; set; }

    public virtual DbSet<Member> Members { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderItem> OrderItems { get; set; }

    public virtual DbSet<Origin> Origins { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<Staff> Staffs { get; set; }

    public virtual DbSet<State> States { get; set; }

    public virtual DbSet<Taste> Tastes { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Capacity>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Capacity1)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("Capacity");
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Category1)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("Category");
        });

        modelBuilder.Entity<Event>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Discount).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Information)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.StartTime).HasPrecision(0);
        });

        modelBuilder.Entity<Member>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Account)
                .IsRequired()
                .HasMaxLength(30);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(60);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(12);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(10);
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.MemberId).HasColumnName("MemberID");
            entity.Property(e => e.StateId).HasColumnName("StateID");
            entity.Property(e => e.TotalMoney).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.Member).WithMany(p => p.Orders)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Orders_Members");

            entity.HasOne(d => d.State).WithMany(p => p.Orders)
                .HasForeignKey(d => d.StateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Orders_States");
        });

        modelBuilder.Entity<OrderItem>(entity =>
        {
            entity.ToTable("Order_Items");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.ProductsId).HasColumnName("ProductsID");
            entity.Property(e => e.ProductsPrice).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.TotalMoney).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.Order).WithMany(p => p.OrderItems)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Order_Items_Orders");

            entity.HasOne(d => d.Products).WithMany(p => p.OrderItems)
                .HasForeignKey(d => d.ProductsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Order_Items_Products1");
        });

        modelBuilder.Entity<Origin>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Origin1)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("Origin");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CapId).HasColumnName("Cap_id");
            entity.Property(e => e.CatId).HasColumnName("Cat_id");
            entity.Property(e => e.ImageLink).HasMaxLength(500);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.OrigId).HasColumnName("Orig_id");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.TastesId).HasColumnName("TastesID");
            entity.Property(e => e.Year).HasMaxLength(50);

            entity.HasOne(d => d.Cap).WithMany(p => p.Products)
                .HasForeignKey(d => d.CapId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Products_Capacities");

            entity.HasOne(d => d.Cat).WithMany(p => p.Products)
                .HasForeignKey(d => d.CatId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Products_Categories");

            entity.HasOne(d => d.Orig).WithMany(p => p.Products)
                .HasForeignKey(d => d.OrigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Products_Origins");

            entity.HasOne(d => d.Tastes).WithMany(p => p.Products)
                .HasForeignKey(d => d.TastesId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Products_Tastes");
        });

        modelBuilder.Entity<Staff>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.StaffAccount)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.StaffPassword)
                .IsRequired()
                .HasMaxLength(15);
        });

        modelBuilder.Entity<State>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.StateName)
                .IsRequired()
                .HasMaxLength(10);
        });

        modelBuilder.Entity<Taste>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Taste1)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("Taste");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}